database tn_system_contract;

// `system_streams` is the table that stores the streams that have been accepted by the TSN Gov
table system_streams {
    stream_id text notnull minlen(32) maxlen(32), // stream id, name of contract in form of a hash, starts with st
    data_provider text notnull minlen(40) maxlen(40), // wallet address, deployer of contract, does NOT start with 0x
    accepted_at int notnull, // blockheight
    revoked_at int, // blockheight

    #data_provider_stream_id_idx primary(data_provider, stream_id)
}

procedure get_official_stream($data_provider text, $stream_id text) public view returns (result bool) {
    // ensure valid address
    $data_provider_cleaned text := ensure_ethereum_address($data_provider);

    for $row in SELECT * FROM system_streams WHERE data_provider = $data_provider_cleaned AND stream_id = $stream_id AND revoked_at IS NULL {
        return $row.stream_id IS DISTINCT FROM null;
    }

    return false;
}

// Verify hex enforces the format `ab1234` instead of `0xab1234` so we can quickly spot errors
// it also checks if it's a valid hex string
procedure verify_hex($text text) private view {
    $hex text := decode($text, 'hex');

    if $hex == null {
        error(format('invalid hex: %s', $text));
    }
}

foreign procedure ext_get_metadata($key text, $only_latest bool, $ref text) returns table(
    row_id uuid,
    value_i int,
    value_f decimal(36,18),
    value_b bool,
    value_s text,
    value_ref text,
    created_at int
)

procedure stream_exists($data_provider text, $stream_id text) public view returns (result bool) {
    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM ext_get_metadata[$dbid, 'get_metadata']('type', true, null) {
        return true;
    }

    return false;
}

procedure accept_stream($data_provider text, $stream_id text) public owner {
    // TODO: check if stream exists
    $stream_exists bool := stream_exists($data_provider, $stream_id);
    if $stream_exists == false {
        error('stream does not exist');
    }

    // TODO: if it's a composed stream, check if all children are already system streams

    $is_official_stream bool := get_official_stream($data_provider, $stream_id);

    if $is_official_stream == true {
        error('this stream is already official');
    }

    $current_blockheight int := @height;

    $verified_data_provider text := ensure_ethereum_address($data_provider);

    INSERT INTO system_streams (stream_id, data_provider, accepted_at)
    VALUES ($stream_id, $verified_data_provider, $current_blockheight);
}

procedure revoke_stream($data_provider text, $stream_id text) public owner {
    // ensure valid address
    $data_provider_cleaned text := ensure_ethereum_address($data_provider);

    $is_official_stream bool := get_official_stream($data_provider_cleaned, $stream_id);

    // Check if
    if $is_official_stream == false {
        error('this stream is not official');
    }

    $current_blockheight int := @height;

    UPDATE system_streams SET revoked_at = $current_blockheight WHERE data_provider = $data_provider_cleaned AND stream_id = $stream_id;
}

// -------------------------------------------------------------------------------------------------
// ------------------------------- FOREIGN PROCEDURES --------------------------------------------
// -------------------------------------------------------------------------------------------------

foreign procedure ext_get_record($date_from text, $date_to text, $frozen_at int) returns table(
    date_value text,
    value decimal(36,18)
)

foreign procedure ext_get_index($date_from text, $date_to text, $frozen_at int, $base_date text) returns table(
    date_value text,
    value decimal(36,18)
)
foreign procedure ext_get_index_change($date_from text, $date_to text, $frozen_at int, $base_date text, $days_interval int) returns table (
    value decimal(36,18)
)

// -------------------------------------------------------------------------------------------------
// ------------------------------- UNSAFE PROCEDURES -----------------------------------------------
// -------------------------------------------------------------------------------------------------

procedure get_unsafe_record($data_provider text, $stream_id text, $date_from text, $date_to text, $frozen_at int) public view returns table(
    date_value text,
    value decimal(36,18)
) {
    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM ext_get_record[$dbid, 'get_record']($date_from, $date_to, $frozen_at) {
        return next $row.date_value, $row.value;
    }
}

procedure get_unsafe_index($data_provider text, $stream_id text, $date_from text, $date_to text, $frozen_at int, $base_date text) public view returns table(
    date_value text,
    value decimal(36,18)
) {
    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM ext_get_index[$dbid, 'get_index']($date_from, $date_to, $frozen_at, $base_date) {
        return next $row.date_value, $row.value;
    }
}

procedure get_unsafe_index_change($data_provider text, $stream_id text, $date_from text, $date_to text, $frozen_at int, $base_date text, $days_interval int) public view returns table(
    value decimal(36,18)
) {
    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM ext_get_index_change[$dbid, 'get_index_change']($date_from, $date_to, $frozen_at, $base_date, $days_interval) {
        return next $row.value;
    }
}

// -------------------------------------------------------------------------------------------------
// ------------------------------- SAFE PROCEDURES -----------------------------------------------
// -------------------------------------------------------------------------------------------------

procedure get_record($data_provider text, $stream_id text, $date_from text, $date_to text, $frozen_at int) public view returns table(
    date_value text,
    value decimal(36,18)
) {

    $is_official_stream bool := get_official_stream($data_provider, $stream_id);

    if $is_official_stream == false {
        error('this stream is not official');
    }

    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM get_unsafe_record($data_provider, $stream_id, $date_from, $date_to, $frozen_at) {
        return next $row.date_value, $row.value;
    }
}

procedure get_index($data_provider text, $stream_id text, $date_from text, $date_to text, $frozen_at int, $base_date text) public view returns table(
    date_value text,
    value decimal(36,18)
) {
    $is_official_stream bool := get_official_stream($data_provider, $stream_id);

    if $is_official_stream == false {
        error('this stream is not official');
    }

    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM ext_get_index[$dbid, 'get_index']($date_from, $date_to, $frozen_at, $base_date) {
        return next $row.date_value, $row.value;
    }
}

procedure get_index_change($data_provider text, $stream_id text, $date_from text, $date_to text, $frozen_at int, $base_date text, $days_interval int) public view returns table(
    value decimal(36,18)
) {
    $is_official_stream bool := get_official_stream($data_provider, $stream_id);

    if $is_official_stream == false {
        error('this stream is not official');
    }

    $dbid text := get_dbid($data_provider, $stream_id);

    for $row in SELECT * FROM ext_get_index_change[$dbid, 'get_index_change']($date_from, $date_to, $frozen_at, $base_date, $days_interval) {
        return next $row.value;
    }

}

// -------------------------------------------------------------------------------------------------
// ------------------------------- HELPER PROCEDURES -----------------------------------------------
// -------------------------------------------------------------------------------------------------


procedure get_dbid($data_provider text, $stream_id text) private view returns (result text) {
    $starts_with_0x bool := false;
    for $row in SELECT $data_provider LIKE '0x%' as a {
        $starts_with_0x := $row.a;
    }

    $data_provider_without_0x text;

    if $starts_with_0x == true {
        $data_provider_without_0x := substring($data_provider, 3);
    } else {
        $data_provider_without_0x := $data_provider;
    }

    return generate_dbid($stream_id, decode($data_provider_without_0x, 'hex'));
}

procedure ensure_ethereum_address($text text) private view returns (result text) {
    $final_text_without_0x text := $text;
    for $row in SELECT $text LIKE '0x%' as is_0x {
        if $row.is_0x == true {
            $final_text_without_0x := substring($text, 3);
        }
    }

    // verify hex
    verify_hex($final_text_without_0x);

    // should have 40 characters
    if length($final_text_without_0x) != 40 {
        error(format('invalid address length: %s', $final_text_without_0x));
    }

    return $final_text_without_0x;
}