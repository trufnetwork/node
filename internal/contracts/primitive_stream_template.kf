// This file is the template to be used by Data Providers to deploy their own contracts.
// A stream must conform to this same interface (read and permissions) to be eligible to officialization from our
// accepted System Streams.

database primitive_stream_db_name;

table primitive_events {
    date_value text notnull minlen(10) maxlen(10), // enforce yyyy-mm-dd format
    value decimal(10,3) notnull,
    created_at int notnull, // based on blockheight

    #identifier_idx   primary(date_value, created_at)
}

table metadata {
    row_id      uuid    primary notnull,
    metadata_key         text    notnull,
    value_i     int,                 // integer type
    value_f     decimal(10,3),
    value_b     bool,                // boolean type
    value_s     text,                // string type
    value_ref   text,                // indexed string type -- lowercase
    created_at  int     notnull,     // block height
    disabled_at int,                 // block height

    #key_idx    index(metadata_key),
    #ref_idx    index(value_ref),
    #created_idx    index(created_at) // faster sorting
}

procedure is_initiated() private view returns (result bool) {
    // check if it was already initialized
    // for that we check if type is already provided
    for $row in SELECT * FROM metadata WHERE metadata_key = 'type' LIMIT 1 {
        return true;
    }

    return false;
}

procedure is_stream_owner($wallet text) public view returns (result bool) {
    for $row in SELECT * FROM metadata WHERE metadata_key = 'stream_owner' AND value_ref = LOWER($wallet) LIMIT 1 {
        return true;
    }
    return false;
}

procedure is_wallet_allowed_to_read($wallet text) public view returns (value bool) {

    // if public, anyone can always read
    // If there's no visibility metadata, it's public.
    $visibility int := 0;
    for $v_row in SELECT * FROM get_metadata('read_visibility', true, null) {
        $visibility := $v_row.value_i;
    }

    if $visibility == 0 {
        return true;
    }

    // if it's the owner, it's permitted
    if is_stream_owner($wallet) {
        return true;
    }

    // if there's metadata allow_read_wallet -> <wallet>, then its permitted
    for $row in SELECT * FROM get_metadata('allow_read_wallet', false, $wallet) {
        return true;
    }

    return false;
}

procedure stream_owner_only() private {
    if is_stream_owner(@caller) == false  {
        error('Stream owner only procedure');
    }
}

// init method prepares the contract with default values and permanent ones
procedure init() public owner {
    if is_initiated() {
        error('this contract was already initialized');
    }

    $current_block int := @height;

    // uuid's namespaces are any random generated uuid from https://www.uuidtools.com/v5
    // but each usage should be different to maintain determinism, so we reuse the previous result
    $current_uuid uuid := uuid_generate_v5('111bfa42-17a2-11ef-bf03-325096b39f47'::uuid, @txid);

    // type = primitive
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_s, created_at)
        VALUES ($current_uuid, 'type', 'primitive', $current_block);

    // stream_owner = @caller
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_ref, created_at)
        VALUES ($current_uuid, 'stream_owner', LOWER(@caller), 1);

    // compose_visibility = 0 (public)
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_i, created_at)
        VALUES ($current_uuid, 'compose_visibility', 0, $current_block);

    // read_visibility = 0 (public)
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_i, created_at)
        VALUES ($current_uuid, 'read_visibility', 0, $current_block);

    $readonly_keys text[] := [
        'type',
        'stream_owner',
        'readonly_key'
    ];

    for $key in $readonly_keys {
        $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
        INSERT INTO metadata (row_id, metadata_key, value_s, created_at)
            VALUES ($current_uuid, 'readonly_key', $key, $current_block);
    }
}

// Note:    We're letting the user be the source of truth for which type a key should have.
//          To change that, we could initiate `key_type:<key>` key on metadata table, that could be used here
//          to enforce a type. However, this would force us to know every metadata key before deploying a contract
procedure insert_metadata(
    $key text,
    $value text,
    $val_type text
    // TODO: would be better to use value_x from args. However this doesn't work well for nullable inputs
    //  i.e. if we use a bool type we'll get an conversion error from Nil -> bool. And we don't want to force user to provide
    //  a value if nil is intended.
    ) public {

    $value_i int;
    $value_s text;
    $value_f decimal(10,3);
    $value_b bool;
    $value_ref text;

    if $val_type == 'int' {
        $value_i := $value::int;
    } elseif $val_type == 'string' {
        $value_s := $value;
    } elseif $val_type == 'bool' {
        $value_b := $value::bool;
    } elseif $val_type == 'ref' {
        $value_ref := $value;
    } elseif $val_type == 'float' {
        $value_f := $value::decimal(10,3);
    } else {
        error(format('unknown type used "%s". valid types = "float" | "bool" | "int" | "ref" | "string"', $val_type));
    }

    stream_owner_only();

    if is_initiated() == false {
        error('contract must be initiated');
    }

    // check if it's read-only
    for $row in SELECT * FROM metadata WHERE metadata_key = 'readonly_key' AND value_s = $key LIMIT 1 {
        error('Cannot insert metadata for read-only key');
    }

    $uuid uuid := uuid_generate_v5('1361df5d-0230-47b3-b2c1-37950cf51fe9'::uuid, @txid);
    $current_block int := @height;

    // insert data
    INSERT INTO metadata (row_id, metadata_key, value_i, value_f, value_s, value_b, value_ref, created_at)
        VALUES ($uuid, $key, $value_i, $value_f, $value_s, $value_b, LOWER($value_ref), $current_block);
}

// key: the metadata key to look for
// only_latest: if true, only return the latest version of the metadata
// ref: if provided, only return metadata with that ref
procedure get_metadata($key text, $only_latest bool, $ref text) public view returns table(
        row_id uuid,
        value_i int,
        value_f decimal(10,3),
        value_b bool,
        value_s text,
        value_ref text,
        created_at int
        ) {

        if $only_latest == true {
            if $ref is distinct from null {
                for $row in SELECT
                              row_id,
                              value_ref,
                              created_at
                FROM metadata
                WHERE metadata_key = $key AND disabled_at IS NULL AND value_ref = LOWER($ref)
                ORDER BY created_at DESC
                LIMIT 1 {
                    return next $row.row_id, null, null, null, null, $row.value_ref, $row.created_at;
                }
            } else {
                return SELECT
                              row_id,
                              value_i,
                              value_f,
                              value_b,
                              value_s,
                              value_ref,
                              created_at
                FROM metadata
                WHERE metadata_key = $key AND disabled_at IS NULL
                ORDER BY created_at DESC
                LIMIT 1;
            }
        } else {
           // SHOULD BE THE EXACT CODE AS ABOVE, BUT WITHOUT LIMIT
           if $ref is distinct from null {
               for $row2 in SELECT
                             row_id,
                             value_ref,
                             created_at
               FROM metadata
               WHERE metadata_key = $key AND disabled_at IS NULL AND value_ref = LOWER($ref)
               ORDER BY created_at DESC {
                   return next $row2.row_id, null, null, null, null, $row2.value_ref, $row2.created_at;
               }
           } else {
               return SELECT
                             row_id,
                             value_i,
                             value_f,
                             value_b,
                             value_s,
                             value_ref,
                             created_at
               FROM metadata
               WHERE metadata_key = $key AND disabled_at IS NULL
               ORDER BY created_at DESC;
           }
        }
}


procedure disable_metadata($row_id uuid) public {
    stream_owner_only();

    $current_block int := @height;

    $found bool := false;

    // Check if the metadata is not read-only
    for $metadata_row in
    SELECT metadata_key
    FROM metadata
    WHERE row_id = $row_id AND disabled_at IS NULL
    LIMIT 1 {
        $found := true;
        $row_key text := $metadata_row.metadata_key;

        for $readonly_row in SELECT row_id FROM metadata WHERE metadata_key = 'readonly_key' AND value_s = $row_key LIMIT 1 {
            error('Cannot disable read-only metadata');
        }

        UPDATE metadata SET disabled_at = $current_block
        WHERE row_id = $row_id;
    }

    if $found == false {
        error('metadata record not found');
    }
}

procedure insert_record($date_value text, $value decimal(10,3)) public {
    stream_owner_only();

    if is_initiated() == false {
        error('contract must be initiated');
    }

    $current_block int := @height;

    // insert data
    INSERT INTO primitive_events (date_value, value, created_at)
        VALUES ($date_value, $value, $current_block);
}

// Truflations calculation is ((current_primitive/first_primitive)*100).
// This essentially gives us the same result, but with an extra 3 digits of precision.
// index := (currentPrimitive * 100) / basePrimitive
procedure get_index($date_from text, $date_to text, $frozen_at text) public view returns table(
        date_value text,
        value decimal(10,3)
        ) {

    $baseValue decimal(10,3) := get_base_value();
    if $baseValue == 0::decimal(10,3) {
        error('base value is 0');
    }

    for $current_record in SELECT * FROM get_record($date_from, $date_to, $frozen_at) {
        $index decimal(10,3) := ($current_record.value * 100::decimal(10,3)) / $baseValue;
        return next $current_record.date_value, $index;
    }
}

// get_base_value returns the first value of the primitive stream
procedure get_base_value() private view returns (value decimal(10,3)) {
    for $row in SELECT value from primitive_events ORDER BY date_value ASC, created_at DESC LIMIT 1 {
        return $row.value;
    }

    // if no iterations, then there is no base value
    error('no base value found');
}

procedure get_primitive(
    $date_from text,
    $date_to text,
    $frozen_at text
    ) private view returns table(
    date_value text,
    value decimal(10,3)
    ) {

    // check read access
    if is_wallet_allowed_to_read(@caller) == false {
        error('wallet not allowed to read');
    }

    $frozenValue int := 0;
    if $frozen_at != '' {
        $frozenValue := $frozen_at::int;
    }

    // TODO: whereClause here is a placeholder only, not supported yet, but it will make things cleaner if it available
    //$whereClause text := 'WHERE 1=1 ';
    //if $date_from != '' {
    //    $whereClause := $whereClause || 'AND date_value >= $date_from ';
    //}

    //if $date_to != '' {
    //    $whereClause := $whereClause || 'AND date_value <= $date_to ';
    //}


    // TODO: Normally we would use the following query to get the latest value of each date
    // But it's not working for JOIN and MAX() function
    //for $row in SELECT date_value, value FROM primitive_events JOIN (SELECT date_value, MAX(created_at) as created_at FROM primitive_events GROUP BY date_value) as max_created
    //ON primitive_events.date_value = max_created.date_value AND primitive_events.created_at = max_created.created_at
    //$whereClause
    //ORDER BY date_value DESC {
    //    return next $row.date_value, $row.value;
    //}

    // TODO: had to use this workaround because && operator is not working
    // Also, it will return multiple records on the given date if there are multiple records with the same date
    if $date_from != '' {
        if $date_to != '' {
            for $row_record1 in SELECT date_value, value FROM primitive_events
             WHERE date_value >= $date_from AND date_value <= $date_to
             AND (created_at <= $frozenValue OR $frozenValue = 0)
             ORDER BY date_value DESC {
                return next $row_record1.date_value, $row_record1.value;
            }
        } else {
            for $row_record2 in SELECT date_value, value FROM primitive_events
            WHERE date_value >= $date_from
            AND (created_at <= $frozenValue OR $frozenValue = 0)
            ORDER BY date_value DESC {
                return next $row_record2.date_value, $row_record2.value;
            }
        }
    } else {
        if $date_to == '' {
            for $row_record3 in SELECT date_value, value FROM primitive_events
            WHERE created_at <= $frozenValue OR $frozenValue = 0
            ORDER BY date_value DESC, created_at DESC LIMIT 1 {
                return next $row_record3.date_value, $row_record3.value;
            }
        } else {
            error('date_from is required if date_to is provided');
        }
    }
}

procedure get_record(
    $date_from text,
    $date_to text,
    $frozen_at text
    ) public view returns table(
    date_value text,
    value decimal(10,3)
    ) {

    $countedRecords int := 0;
    for $row in SELECT COUNT(*) as count FROM primitive_events WHERE date_value <= $date_from {
        $countedRecords := $row.count;
    }

    $firstRecord text := '';
    for $row1 in SELECT * FROM get_primitive($date_from, $date_to, $frozen_at) ORDER BY date_value ASC LIMIT 1 {
        $firstRecord := $row1.date_value;
    }

    if ($countedRecords == 0 OR $firstRecord != $date_from) AND $date_from != '' {
        $lastPrimitiveCount int := 0;
        for $row3 in SELECT COUNT(*) as count FROM get_last_primitive($date_from) {
            $lastPrimitiveCount := $row3.count;
        }

        if $lastPrimitiveCount == 0 {
        } elseif $lastPrimitiveCount != 1 {
            error('more than one record found');
        } else {
            for $row4 in SELECT * FROM get_last_primitive($date_from) {
                return next $date_from, $row4.value;
            }

            for $row5 in SELECT * FROM get_primitive($date_from, $date_to, $frozen_at) {
                return next $row5.date_value, $row5.value;
            }
        }
    } else {
        return SELECT * FROM get_primitive($date_from, $date_to, $frozen_at);
    }
}

procedure get_last_primitive(
    $date_from text
) public view returns table(
    date_value text,
    value decimal(10,3)
    ) {
    for $row in SELECT date_value, value FROM primitive_events WHERE date_value <= $date_from ORDER BY date_value DESC, created_at DESC LIMIT 1 {
        return next $row.date_value, $row.value;
    }
}

procedure transfer_stream_ownership($new_owner text) public {
    stream_owner_only();

    // fail if not a valid address
    check_eth_address($new_owner);

    UPDATE metadata SET value_ref = LOWER($new_owner)
    WHERE metadata_key = 'stream_owner';
}

procedure check_eth_address($address text) private {
    // TODO better check when kwil supports regexp and {}[] inside strings
    // regex: ^0x[0-9a-fA-F]{40}$
    // for $row in SELECT regexp_match($address, '^0x[0-9a-fA-F]{40}$') {
    //     return true;
    // }

    if (length($address) != 42) {
        error('invalid address length');
    }

    // check if starts with 0x
    for $row in SELECT $address LIKE '0x%' as a {
        if $row.a == false {
            error('address does not start with 0x');
        }
    }
}