// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "github.com/kwilteam/kwil-db/common/sql"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// AccessMode provides a mock function with given fields:
func (_m *DB) AccessMode() sql.AccessMode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccessMode")
	}

	var r0 sql.AccessMode
	if rf, ok := ret.Get(0).(func() sql.AccessMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sql.AccessMode)
	}

	return r0
}

// DB_AccessMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessMode'
type DB_AccessMode_Call struct {
	*mock.Call
}

// AccessMode is a helper method to define mock.On call
func (_e *DB_Expecter) AccessMode() *DB_AccessMode_Call {
	return &DB_AccessMode_Call{Call: _e.mock.On("AccessMode")}
}

func (_c *DB_AccessMode_Call) Run(run func()) *DB_AccessMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_AccessMode_Call) Return(_a0 sql.AccessMode) *DB_AccessMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_AccessMode_Call) RunAndReturn(run func() sql.AccessMode) *DB_AccessMode_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTx provides a mock function with given fields: ctx
func (_m *DB) BeginTx(ctx context.Context) (sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type DB_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DB_Expecter) BeginTx(ctx interface{}) *DB_BeginTx_Call {
	return &DB_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *DB_BeginTx_Call) Run(run func(ctx context.Context)) *DB_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_BeginTx_Call) Return(_a0 sql.Tx, _a1 error) *DB_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_BeginTx_Call) RunAndReturn(run func(context.Context) (sql.Tx, error)) *DB_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, stmt, args
func (_m *DB) Execute(ctx context.Context, stmt string, args ...interface{}) (*sql.ResultSet, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, stmt)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *sql.ResultSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.ResultSet, error)); ok {
		return rf(ctx, stmt, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.ResultSet); ok {
		r0 = rf(ctx, stmt, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ResultSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, stmt, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type DB_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - stmt string
//   - args ...interface{}
func (_e *DB_Expecter) Execute(ctx interface{}, stmt interface{}, args ...interface{}) *DB_Execute_Call {
	return &DB_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx, stmt}, args...)...)}
}

func (_c *DB_Execute_Call) Run(run func(ctx context.Context, stmt string, args ...interface{})) *DB_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *DB_Execute_Call) Return(_a0 *sql.ResultSet, _a1 error) *DB_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_Execute_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (*sql.ResultSet, error)) *DB_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
