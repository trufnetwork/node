// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/kwilteam/kwil-db/common"

	mock "github.com/stretchr/testify/mock"

	sql "github.com/kwilteam/kwil-db/common/sql"

	types "github.com/kwilteam/kwil-db/core/types"
)

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

type Engine_Expecter struct {
	mock *mock.Mock
}

func (_m *Engine) EXPECT() *Engine_Expecter {
	return &Engine_Expecter{mock: &_m.Mock}
}

// CreateDataset provides a mock function with given fields: ctx, tx, schema, caller
func (_m *Engine) CreateDataset(ctx context.Context, tx sql.DB, schema *common.Schema, caller []byte) error {
	ret := _m.Called(ctx, tx, schema, caller)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DB, *common.Schema, []byte) error); ok {
		r0 = rf(ctx, tx, schema, caller)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Engine_CreateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataset'
type Engine_CreateDataset_Call struct {
	*mock.Call
}

// CreateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - tx sql.DB
//   - schema *common.Schema
//   - caller []byte
func (_e *Engine_Expecter) CreateDataset(ctx interface{}, tx interface{}, schema interface{}, caller interface{}) *Engine_CreateDataset_Call {
	return &Engine_CreateDataset_Call{Call: _e.mock.On("CreateDataset", ctx, tx, schema, caller)}
}

func (_c *Engine_CreateDataset_Call) Run(run func(ctx context.Context, tx sql.DB, schema *common.Schema, caller []byte)) *Engine_CreateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DB), args[2].(*common.Schema), args[3].([]byte))
	})
	return _c
}

func (_c *Engine_CreateDataset_Call) Return(_a0 error) *Engine_CreateDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_CreateDataset_Call) RunAndReturn(run func(context.Context, sql.DB, *common.Schema, []byte) error) *Engine_CreateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataset provides a mock function with given fields: ctx, tx, dbid, caller
func (_m *Engine) DeleteDataset(ctx context.Context, tx sql.DB, dbid string, caller []byte) error {
	ret := _m.Called(ctx, tx, dbid, caller)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DB, string, []byte) error); ok {
		r0 = rf(ctx, tx, dbid, caller)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Engine_DeleteDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataset'
type Engine_DeleteDataset_Call struct {
	*mock.Call
}

// DeleteDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - tx sql.DB
//   - dbid string
//   - caller []byte
func (_e *Engine_Expecter) DeleteDataset(ctx interface{}, tx interface{}, dbid interface{}, caller interface{}) *Engine_DeleteDataset_Call {
	return &Engine_DeleteDataset_Call{Call: _e.mock.On("DeleteDataset", ctx, tx, dbid, caller)}
}

func (_c *Engine_DeleteDataset_Call) Run(run func(ctx context.Context, tx sql.DB, dbid string, caller []byte)) *Engine_DeleteDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DB), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *Engine_DeleteDataset_Call) Return(_a0 error) *Engine_DeleteDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_DeleteDataset_Call) RunAndReturn(run func(context.Context, sql.DB, string, []byte) error) *Engine_DeleteDataset_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, tx, dbid, query, values
func (_m *Engine) Execute(ctx context.Context, tx sql.DB, dbid string, query string, values map[string]interface{}) (*sql.ResultSet, error) {
	ret := _m.Called(ctx, tx, dbid, query, values)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *sql.ResultSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DB, string, string, map[string]interface{}) (*sql.ResultSet, error)); ok {
		return rf(ctx, tx, dbid, query, values)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.DB, string, string, map[string]interface{}) *sql.ResultSet); ok {
		r0 = rf(ctx, tx, dbid, query, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ResultSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.DB, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, tx, dbid, query, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Engine_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Engine_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - tx sql.DB
//   - dbid string
//   - query string
//   - values map[string]interface{}
func (_e *Engine_Expecter) Execute(ctx interface{}, tx interface{}, dbid interface{}, query interface{}, values interface{}) *Engine_Execute_Call {
	return &Engine_Execute_Call{Call: _e.mock.On("Execute", ctx, tx, dbid, query, values)}
}

func (_c *Engine_Execute_Call) Run(run func(ctx context.Context, tx sql.DB, dbid string, query string, values map[string]interface{})) *Engine_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DB), args[2].(string), args[3].(string), args[4].(map[string]interface{}))
	})
	return _c
}

func (_c *Engine_Execute_Call) Return(_a0 *sql.ResultSet, _a1 error) *Engine_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_Execute_Call) RunAndReturn(run func(context.Context, sql.DB, string, string, map[string]interface{}) (*sql.ResultSet, error)) *Engine_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchema provides a mock function with given fields: ctx, dbid
func (_m *Engine) GetSchema(ctx context.Context, dbid string) (*common.Schema, error) {
	ret := _m.Called(ctx, dbid)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 *common.Schema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.Schema, error)); ok {
		return rf(ctx, dbid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *common.Schema); ok {
		r0 = rf(ctx, dbid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Schema)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Engine_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type Engine_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - dbid string
func (_e *Engine_Expecter) GetSchema(ctx interface{}, dbid interface{}) *Engine_GetSchema_Call {
	return &Engine_GetSchema_Call{Call: _e.mock.On("GetSchema", ctx, dbid)}
}

func (_c *Engine_GetSchema_Call) Run(run func(ctx context.Context, dbid string)) *Engine_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Engine_GetSchema_Call) Return(_a0 *common.Schema, _a1 error) *Engine_GetSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_GetSchema_Call) RunAndReturn(run func(context.Context, string) (*common.Schema, error)) *Engine_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatasets provides a mock function with given fields: ctx, caller
func (_m *Engine) ListDatasets(ctx context.Context, caller []byte) ([]*types.DatasetIdentifier, error) {
	ret := _m.Called(ctx, caller)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasets")
	}

	var r0 []*types.DatasetIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]*types.DatasetIdentifier, error)); ok {
		return rf(ctx, caller)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []*types.DatasetIdentifier); ok {
		r0 = rf(ctx, caller)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.DatasetIdentifier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, caller)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Engine_ListDatasets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatasets'
type Engine_ListDatasets_Call struct {
	*mock.Call
}

// ListDatasets is a helper method to define mock.On call
//   - ctx context.Context
//   - caller []byte
func (_e *Engine_Expecter) ListDatasets(ctx interface{}, caller interface{}) *Engine_ListDatasets_Call {
	return &Engine_ListDatasets_Call{Call: _e.mock.On("ListDatasets", ctx, caller)}
}

func (_c *Engine_ListDatasets_Call) Run(run func(ctx context.Context, caller []byte)) *Engine_ListDatasets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *Engine_ListDatasets_Call) Return(_a0 []*types.DatasetIdentifier, _a1 error) *Engine_ListDatasets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_ListDatasets_Call) RunAndReturn(run func(context.Context, []byte) ([]*types.DatasetIdentifier, error)) *Engine_ListDatasets_Call {
	_c.Call.Return(run)
	return _c
}

// Procedure provides a mock function with given fields: ctx, tx, options
func (_m *Engine) Procedure(ctx context.Context, tx sql.DB, options *common.ExecutionData) (*sql.ResultSet, error) {
	ret := _m.Called(ctx, tx, options)

	if len(ret) == 0 {
		panic("no return value specified for Procedure")
	}

	var r0 *sql.ResultSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DB, *common.ExecutionData) (*sql.ResultSet, error)); ok {
		return rf(ctx, tx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.DB, *common.ExecutionData) *sql.ResultSet); ok {
		r0 = rf(ctx, tx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ResultSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.DB, *common.ExecutionData) error); ok {
		r1 = rf(ctx, tx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Engine_Procedure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Procedure'
type Engine_Procedure_Call struct {
	*mock.Call
}

// Procedure is a helper method to define mock.On call
//   - ctx context.Context
//   - tx sql.DB
//   - options *common.ExecutionData
func (_e *Engine_Expecter) Procedure(ctx interface{}, tx interface{}, options interface{}) *Engine_Procedure_Call {
	return &Engine_Procedure_Call{Call: _e.mock.On("Procedure", ctx, tx, options)}
}

func (_c *Engine_Procedure_Call) Run(run func(ctx context.Context, tx sql.DB, options *common.ExecutionData)) *Engine_Procedure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DB), args[2].(*common.ExecutionData))
	})
	return _c
}

func (_c *Engine_Procedure_Call) Return(_a0 *sql.ResultSet, _a1 error) *Engine_Procedure_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_Procedure_Call) RunAndReturn(run func(context.Context, sql.DB, *common.ExecutionData) (*sql.ResultSet, error)) *Engine_Procedure_Call {
	_c.Call.Return(run)
	return _c
}

// NewEngine creates a new instance of Engine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *Engine {
	mock := &Engine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
