// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	common "github.com/kwilteam/kwil-db/common"
	mock "github.com/stretchr/testify/mock"

	precompiles "github.com/kwilteam/kwil-db/extensions/precompiles"
)

// Instance is an autogenerated mock type for the Instance type
type Instance struct {
	mock.Mock
}

type Instance_Expecter struct {
	mock *mock.Mock
}

func (_m *Instance) EXPECT() *Instance_Expecter {
	return &Instance_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: scoper, app, method, inputs
func (_m *Instance) Call(scoper *precompiles.ProcedureContext, app *common.App, method string, inputs []interface{}) ([]interface{}, error) {
	ret := _m.Called(scoper, app, method, inputs)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*precompiles.ProcedureContext, *common.App, string, []interface{}) ([]interface{}, error)); ok {
		return rf(scoper, app, method, inputs)
	}
	if rf, ok := ret.Get(0).(func(*precompiles.ProcedureContext, *common.App, string, []interface{}) []interface{}); ok {
		r0 = rf(scoper, app, method, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*precompiles.ProcedureContext, *common.App, string, []interface{}) error); ok {
		r1 = rf(scoper, app, method, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Instance_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type Instance_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - scoper *precompiles.ProcedureContext
//   - app *common.App
//   - method string
//   - inputs []interface{}
func (_e *Instance_Expecter) Call(scoper interface{}, app interface{}, method interface{}, inputs interface{}) *Instance_Call_Call {
	return &Instance_Call_Call{Call: _e.mock.On("Call", scoper, app, method, inputs)}
}

func (_c *Instance_Call_Call) Run(run func(scoper *precompiles.ProcedureContext, app *common.App, method string, inputs []interface{})) *Instance_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*precompiles.ProcedureContext), args[1].(*common.App), args[2].(string), args[3].([]interface{}))
	})
	return _c
}

func (_c *Instance_Call_Call) Return(_a0 []interface{}, _a1 error) *Instance_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Instance_Call_Call) RunAndReturn(run func(*precompiles.ProcedureContext, *common.App, string, []interface{}) ([]interface{}, error)) *Instance_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewInstance creates a new instance of Instance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *Instance {
	mock := &Instance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
