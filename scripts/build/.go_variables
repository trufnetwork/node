#!/usr/bin/env sh
set -eu

. ./scripts/build/.git_variables

: "${CGO_ENABLED=}"
: "${GO_LINKMODE=static}"
: "${GO_BUILDMODE=}"
: "${GO_BUILDTAGS=}"
: "${GO_STRIP=}"
: "${GO_GCFLAGS=}"

GOOS="$(go env GOOS)"
GOARCH="$(go env GOARCH)"
if [ "${GOARCH}" = "arm" ]; then
    GOARM="$(go env GOARM)"
fi

BINARY=${1:-}

TARGET=${TARGET:-".build"}
TARGET="$TARGET/${BINARY}"
export TARGET

if [ -z "$CGO_ENABLED" ]; then
    case "$(go env GOOS)" in
        linux)
            case "$(go env GOARCH)" in
                amd64|arm64|arm|s390x)
                    CGO_ENABLED=1
                ;;
                *)
                    CGO_ENABLED=0
                ;;
            esac
        ;;
        darwin|windows)
            CGO_ENABLED=1
        ;;
        *)
            CGO_ENABLED=0
        ;;
    esac
fi
export CGO_ENABLED

GO_LDFLAGS="${GO_LDFLAGS:-}"

# Inject TN repo version and VCS info instead of kwil-db version
TN_VERSION="${TN_VERSION:-$(git describe --match 'v[0-9]*' --dirty --always --tags | sed 's/^v//')}"
TN_COMMIT="$(git rev-parse HEAD)"

# Use commit time if clean, current time if dirty
if git diff-index --quiet HEAD --; then
    # Clean workspace - use commit time
    TN_BUILD_TIME="$(git log -1 --format=%cI)"
else
    # Dirty workspace - use current build time
    TN_BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
fi

# Override version info to show TN repo instead of kwil-db repo
GO_LDFLAGS="$GO_LDFLAGS -X github.com/trufnetwork/node/cmd/version.TNVersion=${TN_VERSION}"
GO_LDFLAGS="$GO_LDFLAGS -X github.com/trufnetwork/node/cmd/version.TNCommit=${TN_COMMIT}"
GO_LDFLAGS="$GO_LDFLAGS -X github.com/trufnetwork/node/cmd/version.TNBuildTime=${TN_BUILD_TIME}"


if [ "$CGO_ENABLED" = "1" ] && [ "$GO_LINKMODE" = "static" ] && [ "$(go env GOOS)" = "linux" ]; then
    GO_LDFLAGS="$GO_LDFLAGS -extldflags=-static"
fi
if [ "$CGO_ENABLED" = "1" ] && [ "$GO_LINKMODE" = "static" ]; then
    # compiling statically with CGO enabled requires osusergo to be set.
    # netgo is also required to avoid: "warning: Using 'getaddrinfo' in
    # statically linked applications requires at runtime the shared libraries
    # from the glibc version used for linking"
    GO_BUILDTAGS="$GO_BUILDTAGS osusergo netgo auth_nep413 auth_ed25519_sha256"
fi
if [ -n "$GO_STRIP" ]; then
    GO_LDFLAGS="$GO_LDFLAGS -s -w"
fi

export GO_LDFLAGS="$GO_LDFLAGS" # https://github.com/koalaman/shellcheck/issues/2064

export SOURCE="${SOURCE:-./app/cmd/kwild/main.go}"

GO_GCFLAGS="${GO_GCFLAGS:-}"
export GO_GCFLAGS="$GO_GCFLAGS"
