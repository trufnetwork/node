name: Deploy Staging Environment

on:
  workflow_dispatch:

jobs:
  #  tests:
  #    uses: ./.github/workflows/ci.yaml  # don't forget to add `on: [workflow_call]` to permit it
  build-image:
    environment: production
    name: Build image
    runs-on: ubuntu-latest
    #    needs: [ tests ]  # require tests to pass before deploy runs
    steps:
      - name: Check secrets
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          GW_SESSION_SECRET: ${{ secrets.GW_SESSION_SECRET }}
          # NODE_PRIVATE_KEYS is a comma separated list of private keys of the nodes to act as validators
          NODE_PRIVATE_KEYS: ${{ secrets.NODE_PRIVATE_KEYS }}
          # PRIVATE_KEY is the private key of the account that will be used to deploy the TN system contract
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          # READ_TOKEN is the token used to read the genesis.json from the tn-node-operator repo
          READ_TOKEN: ${{ secrets.READ_TOKEN }}
        if: ${{ env.AWS_ACCESS_KEY == '' || env.AWS_SECRET_KEY == '' || env.GW_SESSION_SECRET == '' || env.PRIVATE_KEY == '' || env.READ_TOKEN == '' || env.NODE_PRIVATE_KEYS == '' }}
        run: |
          echo "Missing secrets"
          exit 1
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Taskfile
        uses: arduino/setup-task@v2

      - name: Run Taskfile
        run: task kwil-binaries

      - name: Get updated genesis.json
        run: |
          curl -f -H "Authorization: token ${{ secrets.READ_TOKEN }}" \
            --create-dirs -o ./deployments/network/staging/genesis.json \
            https://raw.githubusercontent.com/trufnetwork/truf-node-operator/main/configs/network/staging/genesis.json \
            --silent --show-error \
            || echo "Error: Failed to download genesis.json (HTTP status code: $?)"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          check-latest: true

      - name: Install dependencies
        env:
          GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go work init
          go work use .
          go work use deployments/infra
          go mod download
          go work vendor

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2

      # this step includes building the docker image. See main_cdk.go for details on args used
      - name: Deploy
        run: |
          cd deployments/infra
          # this must be on absolute path
          export CDK_DOCKER=$(pwd)/buildx.sh
          
          # transform to absolute path
          export GENESIS_PATH=$(realpath ../network/staging/genesis.json)
          # make sure there's a file there
          ls -l $GENESIS_PATH

          # GW_CORS_ALLOW_ORIGINS = Comma separated list of allowed origins
          cdk deploy --require-approval never TN-From-Config* TN-Cert* \
            --exclusively \
            --parameters TN-From-Config-staging-Stack:sessionSecret=${{ secrets.GW_SESSION_SECRET }} \
            --parameters TN-From-Config-staging-Stack:corsAllowOrigins=${{ secrets.GW_CORS_ALLOW_ORIGINS || '*' }} \
            --context deploymentStage=STAGING

        env:
          CI: true
          # path to the kwild CLI binary for configuration generation
          KWILD_CLI_PATH: ../../.build/kwild
          CHAIN_ID: trufnetwork-dev
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          NODE_PRIVATE_KEYS: ${{ secrets.NODE_PRIVATE_KEYS }}
