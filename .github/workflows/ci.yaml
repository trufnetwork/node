name: CI

on:
  workflow_call:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
  push:
    branches:
      - main
      - refactor/upgrade-zero-seven # TODO: remove this line after the refactor is done

jobs:
  acceptance-test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Clear cache
        if: ${{ !env.ACT }} # skip during local actions testing
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Lint
        if: ${{ !env.ACT }} # skip during local actions testing
        uses: golangci/golangci-lint-action@v4
        with:
          args: --timeout=30m --issues-exit-code=0
          skip-cache: true

      - name: Run Go Tests
        run: |
          go test ./internal/...

      - name: Setup Cache key
        id: setup-key
        shell: bash
        run: |
          branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          key="${{ runner.os }}-buildx-cache-$branch-ci"
          # make it available to other steps
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.workspace }}/cache
          # cache here is reused by buildx docker builder
          # so we make it dependent on:
          # - working branch
          # - workflow file
          key: ${{ steps.setup-key.outputs.key }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Compose Up
        # docker compose up --wait makes it exit with 1 even for a successful run
        continue-on-error: true
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./compose.yaml"
          # waits every container to be ready, so we're sure there's data already
          # also force build to ensure it is working locally
          up-flags: '--wait --force-recreate --build'
        env:
          CACHE_DIR: ${{ runner.workspace }}/cache
          # This is not a secret, it's hardcoded for the CI testing
          PRIVATE_KEY: "0000000000000000000000000000000000000000000000000000000000000001"
          WHITELIST_WALLETS: "0x304e893AdB2Ad8E8C37F4884Ad1EC3df8bA9bDcf"

      - name: Save Cache
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.workspace }}/cache-new
          key: ${{ steps.setup-key.outputs.key }}

      - name: Cleanup Cache Files
        if: ${{ !env.ACT }} # skip during local actions testing
        run: |
          rm -rf ${{ runner.workspace }}/cache
          rm -rf ${{ runner.workspace }}/cache-new

      # we need it to be manually checked, as above action will always exit with 1 even if it's successful
      - name: Check compose status
        run: |
          output=$(docker ps -a --format "{{.Names}},{{.Image}},{{.Status}}")
          
          function expect_status() {
            image_name=$1
            expected_status=$2
            image_row=$(echo "$output" | grep "$image_name")
            if echo "$image_row" | grep -q "$expected_status"; then
              echo "$image_name exited with 0"
            else
              echo -e "$image_name isn't with expected status $expected_status\n"
              echo -e "docker ps output: \n$output\n\n"
          
              # extract the container name, knowing it's the first column
              container_name=$(echo "$image_row" | cut -d ',' -f 1)
          
              echo -e "docker logs for $image_name: \n"
              docker logs $container_name | tail -n 500
          
              exit 1
            fi
          }
          
          # we ensure both containers are exited with 0
          # if you are running locally, make sure any previous postgres volume state is clean
          # otherwise, tsn-db will error for out for block state being out of sync.
          expect_status "tsn-db:local" "Up "
          expect_status "push-tsn-data:local" "Exited (0)"

      - name: Run Tests
        run: |
          scripts/ci-tests.sh
