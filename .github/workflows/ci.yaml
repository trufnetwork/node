name: CI

on:
  workflow_call:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }} # only run on non-draft PRs
    steps:
      # shared setup for all tests
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.4'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      #ubuntu-latest has go 1.21 installed https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#go
      #self-hosted also has go 1.21 installed
      #the default behavior here will load pre-installed go version
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'
          check-latest: true
          cache: false

      - name: Install dependencies
        env:
          GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go version
          git config --global url."https://${GH_ACCESS_TOKEN}:x-oauth-basic@github.com/truflation/".insteadOf "https://github.com/truflation/"
          task install:deps

  acceptance-test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }} # only run on non-draft PRs
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.4'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Install dependencies
        env:
          GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go version
          git config --global url."https://${GH_ACCESS_TOKEN}:x-oauth-basic@github.com/truflation/".insteadOf "https://github.com/truflation/"
          task install:deps
          go mod download

      - name: Generate go vendor
        #for faster builds and private repos, need to run this after pb:compile:v1
        run: |
          task vendor

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers for TSN DB
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-tsn-db
          # we don't use sha, so we can reuse between commits.
          # docker takes care of invalidating the cache if the build context changes
          #key: ${{ runner.os }}-buildx-tsn-db-${{ github.sha }}
          key: ${{ runner.os }}-buildx-tsn-db
          restore-keys: |
            ${{ runner.os }}-buildx-tsn-db

      # this test have dependency on private repo, so can't be tested
#      - name: Pull kgw repo & create vendor
#        # we only pull the repo, not build the image, because we want to use the cache
#        # provided by the docker/build-push-action
#        # vendor is used to bypass private repo issues
#        run: |
#          rm -rf /tmp/kgw
#          git clone https://github.com/kwilteam/kgw.git /tmp/kgw
#          cd /tmp/kgw
#          GOWORK=off go mod vendor
#          cd -

      # this test have dependency on private repo, so can't be tested
#      - name: Build kgw image
#        id: docker_build_kgw
#        uses: docker/build-push-action@v4
#        with:
#          context: /tmp/kgw
#          load: true
#          builder: ${{ steps.buildx.outputs.name }}
#          file: /tmp/kgw/Dockerfile
#          push: false
#          tags: kgw:latest
#          cache-from: type=local,src=/tmp/.buildx-cache-kgw
#          cache-to: type=local,dest=/tmp/.buildx-cache-kgw-new

      - name: Build image
        id: docker_build_tsn_db
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            git_commit=${{ github.sha }}
            version=${{ steps.config.outputs.version }}
            build_time=${{ github.event.release.created_at }}
          file: ./truflation/docker/tsn.dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache-tsn-db
          cache-to: type=local,dest=/tmp/.buildx-cache-tsn-db-new

      # maybe no need
      # these test have dependency on private repo, so can't be tested
#      - name: Run acceptance test
#        run: |
#          echo "UID=$(id -u)" >> test/acceptance/.env
#          echo "GID=$(id -g)" >> test/acceptance/.env
#          cp test/acceptance/docker-compose.override.yml.example test/acceptance/docker-compose.override.yml
#          echo "KACT_DOCKER_COMPOSE_OVERRIDE_FILE=docker-compose.override.yml" >> test/acceptance/.env
#          task test:act:nb

      # this too has dependency on private repo, so can't be tested, but it have line where dev environment skips the test
#      - name: Run integration test
#        run: |
#          echo "UID=$(id -u)" >> test/integration/.env
#          echo "GID=$(id -g)" >> test/integration/.env
#          cp test/integration/docker-compose.override.yml.example test/integration/docker-compose.override.yml
#          echo "KIT_DOCKER_COMPOSE_OVERRIDE_FILE=docker-compose.override.yml" >> test/integration/.env
#          task test:it:nb:all

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-tsn-db
          mv /tmp/.buildx-cache-tsn-db-new /tmp/.buildx-cache-tsn-db

        # since we don't build kgw image, we don't need to move the cache
#          rm -rf /tmp/.buildx-cache-kgw
#            mv /tmp/.buildx-cache-kgw-new /tmp/.buildx-cache-kgw
