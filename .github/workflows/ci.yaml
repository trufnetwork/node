name: CI

on:
  workflow_call:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.md'
      - '**.kf'
    branches:
      - main

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          # Require: The version of golangci-lint to use.
          version: v1.60.3
          args: --timeout=30m --issues-exit-code=0 --verbose

  acceptance-test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Clear cache
        if: ${{ !env.ACT }} # skip during local actions testing
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v4

      - name: Install Taskfile
        uses: arduino/setup-task@v2

      - name: Run Taskfile
        run: task kwil-binaries

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run Go Tests
        # skip it while we don't have any tests
        if: false
        run: |
          go test ./internal/...

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Compose Up
        # docker compose up --wait makes it exit with 1 even for a successful run
        continue-on-error: true
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./compose.yaml"
          # waits every container to be ready, so we're sure there's data already
          # when in ACT, also force build to ensure it is working locally
          up-flags: "--wait ${{env.ACT && '--build --force-recreate --no-deps' || ''}}"
        env:
          CACHE_FROM: "type=gha,scope=truflation/tn"
          CACHE_TO: "type=gha,mode=max,scope=truflation/tn"

      # we need it to be manually checked, as above action will always exit with 1 even if it's successful
      - name: Check compose status
        run: |
          output=$(docker ps -a --format "{{.Names}},{{.Image}},{{.Status}}")
          
          function expect_status() {
            image_name=$1
            expected_status=$2
            image_row=$(echo "$output" | grep "$image_name")
            if echo "$image_row" | grep -q "$expected_status"; then
              echo "$image_name exited with 0"
            else
              echo -e "$image_name isn't with expected status $expected_status\n"
              echo -e "docker ps output: \n$output\n\n"
          
              # extract the container name, knowing it's the first column
              container_name=$(echo "$image_row" | cut -d ',' -f 1)
          
              echo -e "docker logs for $image_name: \n"
              docker logs $container_name | tail -n 500
          
              exit 1
            fi
          }
          
          # we ensure both containers are exited with 0
          # if you are running locally, make sure any previous postgres volume state is clean
          # otherwise, tn-db will error for out for block state being out of sync.
          expect_status "tn-db:local" "Up"

      - name: Run Tests
        run: |
          scripts/ci-tests.sh
