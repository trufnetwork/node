version: "3"

tasks:
  default:
    cmds:
      - task -l

  build:
    desc: Build kwil binaries
    cmds:
      - task build:kwild
      - task build:kwil-cli

  build:kwild:
    cmds:
      - ./scripts/build/binary kwild
    env:
      TARGET: ./.build
      SOURCE: ./cmd/kwild/main.go

  build:kwil-cli:
    cmds:
      - ./scripts/build/binary kwil-cli
    env:
      TARGET: ./.build
      SOURCE: ./cmd/kwil-cli/main.go

  build:debug:
    desc: Build kwild binary with debug flags
    cmds:
      - go build -gcflags "all=-N -l" -o ./.build/kwild ./cmd/kwild/main.go

  build:benchmark:
    desc: Build benchmark binaries
    cmds:
      - go test -v -c -timeout 0 ./internal/benchmark -o ./.build/benchmark

  kwild:
    desc: Run kwild server
    cmds:
      - .build/kwild --autogen

  postgres:
    desc: Run a postgres container
    cmds:
      - docker start kwil-postgres || docker run -d -p 5432:5432 --name kwil-postgres -e "POSTGRES_HOST_AUTH_METHOD=trust" kwildb/postgres:latest

  indexer:
    desc: Run the indexer
    cmds:
      - ./deployments/indexer/kwil-indexer run

  observer-dev:
    desc: Run the observer development services (vector, prometheus, grafana)
    cmds:
      - docker compose -f deployments/observer/dev-observer-compose.yml up -d

  compose:
    deps: [ kwil-binaries ]
    desc: Run docker-compose locally
    cmds:
      - docker compose up

  compose-dev:
    deps: [ kwil-binaries-dev ]
    desc: Run docker-compose locally with dev configuration, 2 nodes, gateway, and indexer services
    cmds:
        - docker compose -f deployments/dev-net/devnet-compose.yaml up -d
        - docker compose -f deployments/dev-gateway/dev-gateway-compose.yaml up -d
        - docker compose -f deployments/indexer/dev-indexer-compose.yaml up -d
    env:
        BACKENDS: tsn-db-1:8484,tsn-db-2:8484
        CHAIN_ID: tsn-local
        NODE_COMETBFT_ENDPOINT: http://tsn-db-1:26657
        KWIL_PG_CONN: postgresql://kwild@kwil-postgres-1:5432/kwild?sslmode=disable

  compose-dev-down:
    desc: Shutdown dev 2 nodes, gateway, and indexer services
    cmds:
        - docker compose -f deployments/dev-net/devnet-compose.yaml down
        - docker compose -f deployments/dev-gateway/dev-gateway-compose.yaml down
        - docker compose -f deployments/indexer/dev-indexer-compose.yaml down

  tools:
    desc: Install tools
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.56.2
      - go install github.com/vektra/mockery/v2@v2.42.1

  mockery:
    desc: Generate mocks
    cmds:
      - mockery --all

  lint:
    desc: Run linter
    cmds:
      - golangci-lint run

  kwil-binaries:
    cmds:
      - ./scripts/download-binaries.sh
    sources:
      - ./.build/kwil-admin

  kwil-binaries-dev:
    deps:
      - kwil-binaries
    cmds:
      - ./scripts/download-binaries-dev.sh
    sources:
      - ./.build/kgw

  # After generating the certs, you need to trust them in your local machine by running the task setup:local-cert
  # leave the fields empty and press enter to use the default values
  setup:new-local-cert:
    desc: Generate a new local cert
    cmds:
      - sudo openssl req -x509 -nodes -days 365 -addext "subjectAltName = DNS:localhost" -newkey rsa:2048 -keyout ./deployments/dev-gateway/certs/localhost.key -out ./deployments/dev-gateway/certs/localhost.crt

  setup:local-cert:
    desc: Trust local certs for development
    cmds:
      - sudo cp ./deployments/dev-gateway/certs/localhost.crt /usr/local/share/ca-certificates/localhost.crt
      - sudo update-ca-certificates

  start:local-gateway:
    desc: The gateway is not needed for development. However, you might want to test its configuration.
    cmds:
      - docker compose -f deployments/dev-gateway/dev-gateway-compose.yaml up -d

  test:unit:
    desc: Run unit tests
    cmds:
      - go test ./internal/contracts/tests/...

  coverage:
    desc: Run coverage
    cmds:
      - bash ./scripts/coverage.sh

  get-genesis:
    desc: Get genesis file from tsn-node-operator repo
    dotenv: ['.env']
    cmds:
      - |
        curl -f -H "Authorization: token ${READ_TOKEN}" --create-dirs -o ./deployments/network/staging/genesis.json https://raw.githubusercontent.com/truflation/tsn-node-operator/main/configs/network/staging/genesis.json

  benchmark:
    desc: Run benchmark tests and regenerate the report
    cmds:
      - go test -v -timeout 0 ./internal/benchmark