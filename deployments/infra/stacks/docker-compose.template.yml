services:
  tn-postgres:
    image: ghcr.io/trufnetwork/kwil-postgres:latest
    container_name: tn-postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - tn-network
    restart: unless-stopped
    shm_size: 1gb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 12

  tn-node:
    image: ghcr.io/trufnetwork/node:latest
    container_name: tn-node
    entrypoint: ""
    env_file:
      - .env
    volumes:
      - ./tn-data:/root/.kwild
      - /opt/tn/configs:/opt/tn/configs:ro
    ports:
      - "8484:8484"
      - "6600:6600"
      - "26656:26656"
      - "26657:26657"
    depends_on:
      tn-postgres:
        condition: service_healthy
    networks:
      - tn-network
    restart: unless-stopped
    command: |
      sh -c "
        # Only generate NEW config if persistent storage is empty
        if [ ! -f /root/.kwild/config.toml ]; then
          echo 'No existing configuration found. Generating new node configuration...'

          # Resolve external address (prefer env override; fallback if tools exist)
          PUBLIC_IP=\"$${TN_EXTERNAL_ADDRESS:-}\"
          if [ -z \"$$PUBLIC_IP\" ]; then
            if command -v wget >/dev/null 2>&1; then
              PUBLIC_IP=$$(wget -T 2 -qO- https://checkip.amazonaws.com/ 2>/dev/null || true)
            elif command -v curl >/dev/null 2>&1; then
              PUBLIC_IP=$$(curl -m 2 -s https://checkip.amazonaws.com/ 2>/dev/null || true)
            fi
          fi
          [ -n \"$$PUBLIC_IP\" ] && EXTERNAL_FLAG=\"--p2p.external-address $$PUBLIC_IP:26656\" || EXTERNAL_FLAG=\"\"
          echo \"Detected public IP: $$PUBLIC_IP\"

          # Determine network type and generate appropriate configuration
          NETWORK_TYPE=\"$${NETWORK_TYPE:-mainnet}\"

          if [ \"$$NETWORK_TYPE\" = \"custom\" ]; then
            echo 'Creating new custom network with chain ID: '\"$$CHAIN_ID\"
            # Create new network without genesis file
            /app/kwild setup init --root /root/.kwild-new --chain-id \"$$CHAIN_ID\" --rpc.private --db.host tn-postgres $$EXTERNAL_FLAG
          else
            echo 'Joining existing mainnet (tn-v2.1)...'
            # Join existing network using genesis file
            /app/kwild setup init --genesis /opt/tn/configs/network/v2/genesis.json --root /root/.kwild-new --p2p.bootnodes \"4e0b5c952be7f26698dc1898ff3696ac30e990f25891aeaf88b0285eab4663e1#ed25519@node-1.mainnet.truf.network:26656,0c830b69790eaa09315826403c2008edc65b5c7132be9d4b7b4da825c2a166ae#ed25519@node-2.mainnet.truf.network:26656\" --state-sync.enable --state-sync.trusted-providers \"4e0b5c952be7f26698dc1898ff3696ac30e990f25891aeaf88b0285eab4663e1#ed25519@node-1.mainnet.truf.network:26656\" --rpc.private --db.host tn-postgres $$EXTERNAL_FLAG
          fi

          mkdir -p /root/.kwild
          cp /root/.kwild-new/* /root/.kwild/
          rm -rf /root/.kwild-new

          # Now override nodekey if TN_PRIVATE_KEY is provided
          if [ -n \"$${TN_PRIVATE_KEY:-}\" ]; then
            echo 'Overriding generated nodekey with provided private key...'
            CLEAN_KEY=\"$${TN_PRIVATE_KEY#0x}\"
            if ! echo \"$$CLEAN_KEY\" | grep -qE '^[a-fA-F0-9]{64}$$'; then
              echo 'Error: Private key must be 64 hex characters (32 bytes)'
              exit 1
            fi
            echo '{\"key\":\"'$$CLEAN_KEY'\",\"type\":\"secp256k1\"}' > /root/.kwild/nodekey.json
            chmod 600 /root/.kwild/nodekey.json || true
            echo 'Node identity set from provided private key'
          else
            echo 'Using generated node identity'
          fi
        else
          echo 'Using existing node configuration from persistent storage.'
        fi

        echo 'Starting TRUF.NETWORK node...'
        exec /app/kwild start
      "

  postgres-mcp:
    image: ghcr.io/trufnetwork/postgres-mcp:latest
    container_name: tn-mcp
    command: ["--transport=sse", "--access-mode=restricted", "--sse-host=0.0.0.0"]
    environment:
      - DATABASE_URI=postgresql://postgres@tn-postgres:5432/kwild
    ports:
      - "8000:8000"
    depends_on:
      tn-postgres:
        condition: service_healthy
      tn-node:
        condition: service_started
    networks:
      - tn-network
    restart: unless-stopped
    profiles:
      - mcp

networks:
  tn-network:
    name: tn-network
    driver: bridge
