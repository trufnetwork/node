services:
  # Caddy is an easy way for us to handle preflight requests to enable cors
  indexer-caddy:
    image: "caddy:latest"
    hostname: indexer-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - type: bind
        source: ./Caddyfile
        target: /etc/caddy/Caddyfile
    networks:
      - tsn-network

  indexer-postgres:
    image: "postgres:latest"
    restart: on-failure
    hostname: indexer-postgres
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=indexer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    # persis data
    volumes:
        - ${POSTGRES_VOLUME:-data-indexer}:/var/lib/postgresql/data
    networks:
      - tsn-network
  indexer:
    restart: on-failure
    build:
      dockerfile: indexer.dockerfile
      args:
        NODE_COMETBFT_ENDPOINT: ${NODE_COMETBFT_ENDPOINT:?NODE_COMETBFT_ENDPOINT is required}
        KWIL_PG_CONN: ${KWIL_PG_CONN:?KWIL_PG_CONN is required}
        INDEXER_PG_CONN: "postgresql://postgres:postgres@indexer-postgres:5432/indexer?sslmode=disable"
    ports:
      - "1337:1337"
    networks:
      - tsn-network
    depends_on:
      indexer-postgres:
        condition: service_healthy

networks:
  tsn-network:
    driver: bridge
    name: tsn-network
volumes:
  data-indexer: